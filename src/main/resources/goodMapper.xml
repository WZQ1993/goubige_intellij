<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，
namespace的值习惯上设置成包名+sql映射文件名，
这样就能够保证namespace的值是唯一的 
例如namespace=
"me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.wangziqing.goubige.mybatis.daoBase.GoodOperation">
	<!-- 在select标签中编写查询的SQL语句， 
	设置select标签的id属性为getUser，
	id属性值必须是唯一的，
	不能够重复 使用parameterType属性指明查询时使用的参数类型，
	resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 
		User类就是users表所对应的实体类 -->
	<!-- 
		结果映射 
		若type为Good对应，mybatis可以直接注入属性值
		type可以指定为其他类型，需要制定属性对应值，如GoodTitle,指定只注入title
	-->
	<resultMap type="com.wangziqing.goubige.model.Good" id="goods">
		<!--<result column="title" property="title"/>-->
    </resultMap> 
	<!-- 根据id查询得到一个user对象 -->
	<insert id="addGood" parameterType="com.wangziqing.goubige.model.Good"
	useGeneratedKeys="true" keyProperty="ID">
			insert into good values(
			#{ID},
			#{title},
			#{url},
			#{pic},
			#{price},
			#{mall},
			#{date},
			#{categoryID}
			)
	</insert>
	<select id="getGoodByID" parameterType="String" resultType="com.wangziqing.goubige.model.Good"
	useCache="true">
			select * from good where ID=#{ID}
	</select>
	<select id="getGoodsByPage" resultMap="goods" parameterType="com.wangziqing.goubige.model.PageBean">
        <!-- order by id asc是指对查询后的结果进行升序排序 -->
        select * from good limit #{startRow},#{pageSize};
    </select>
	<select id="getGoodByCategory" resultMap="goods" parameterType="int">
		<!-- order by id asc是指对查询后的结果进行升序排序 -->
		select * from good
		WHERE good.categoryID=#{2}
		limit #{0},#{1};
	</select>
	<insert id="starGood" parameterType="com.wangziqing.goubige.model.Star" useGeneratedKeys="true" keyProperty="ID">
		  INSERT  INTO star VALUES(
		  #{ID},
		  #{goodID},
		  #{userID},
		  CURRENT_TIMESTAMP
		  )

	</insert>
	<select id="hasStar" parameterType="int" resultType="int">
		SELECT count(*)
		FROM star
		WHERE userID=#{0} AND goodID=#{1};
	</select>
	<insert id="hisGood" parameterType="com.wangziqing.goubige.model.His" useGeneratedKeys="true" keyProperty="ID">
		INSERT  INTO his VALUES(
		#{ID},
		#{goodID},
		#{userID},
		CURRENT_TIMESTAMP
		)ON DUPLICATE KEY UPDATE creatTime=CURRENT_TIMESTAMP;
	</insert>
	<select id="getStarGood" resultMap="goods" parameterType="int">
		<!-- order by id asc是指对查询后的结果进行升序排序 -->
		select * from good,star
		WHERE good.ID=star.goodID AND star.userID=#{2}
		limit #{0},#{1};
	</select>
	<select id="getHistoryGood" resultMap="goods" parameterType="int">
		<!-- order by id asc是指对查询后的结果进行升序排序 -->
		select * from good,his
		WHERE good.ID=his.goodID AND his.userID=#{2}
		ORDER BY creatTime DESC
		limit #{0},#{1};
	</select>
	<insert id="addAndUpdateScore" parameterType="com.wangziqing.goubige.model.Score" useGeneratedKeys="true" keyProperty="ID">
		INSERT INTO score VALUES(
		#{userID},
		CURRENT_TIMESTAMP,
		#{score},
		#{categoryID}
		)
		ON DUPLICATE KEY UPDATE
		creatTime=CURRENT_TIMESTAMP,
		score=score+#{score};
	</insert>
	<select id="getCategoryID" parameterType="int" resultType="int">
		SELECT categoryID FROM good
		WHERE good.ID=#{0};
	</select>
	<select id="getCategoryIDByUserID" parameterType="int" resultType="int">
		select categoryID
 		from score where userID=#{0}
 		ORDER BY score
 		limit 3;
	</select>
	<select id="getRandByCategoryID" parameterType="int" resultMap="goods">
		SELECT * FROM `good` AS t1 JOIN
		(SELECT ROUND(RAND() * ((SELECT MAX(ID) FROM `good` where categoryID=#{0})-(SELECT MIN(ID) FROM `good` where categoryID=#{0}))+(SELECT MIN(ID) FROM `good` where categoryID=#{0})) AS ID) AS t2
		WHERE t1.ID >= t2.ID
		ORDER BY t1.ID LIMIT #{1};
	</select>
	<select id="getRand" parameterType="int" resultType="com.wangziqing.goubige.model.Good">
		SELECT * FROM `good` AS t1 JOIN
		(SELECT ROUND(RAND() * ((SELECT MAX(ID) FROM `good`)-(SELECT MIN(ID) FROM `good`))+(SELECT MIN(ID) FROM `good`)) AS ID) AS t2
		WHERE t1.ID >= t2.ID
		ORDER BY t1.ID LIMIT 1;
	</select>
</mapper>